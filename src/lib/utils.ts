import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

/**
 * Fun√ß√£o utilit√°ria para processar e formatar o tipo de ve√≠culo de maneira consistente
 * em toda a aplica√ß√£o.
 * 
 * @param tipoVeiculo - O tipo de ve√≠culo a ser formatado ou undefined/null
 * @returns String formatada ou string vazia se n√£o houver tipo
 */
export function formatarTipoVeiculo(tipoVeiculo: string | undefined | null): string {
  // Caso seja undefined ou null, retorna string vazia
  if (tipoVeiculo === undefined || tipoVeiculo === null) {
    return "";
  }
  
  // Verificar se √© uma string v√°lida antes de chamar trim()
  if (typeof tipoVeiculo !== 'string') {
    console.warn('formatarTipoVeiculo: tipoVeiculo n√£o √© uma string:', typeof tipoVeiculo, tipoVeiculo);
    return "";
  }
  
  // Trim e converter para mai√∫sculas
  const formatado = tipoVeiculo.trim().toUpperCase();
  
  // Se ap√≥s formata√ß√£o ficar vazio, retornar string vazia
  return formatado || "";
}

/**
 * Fun√ß√£o utilit√°ria que garante que qualquer objeto de motorista (seja do formato Driver ou DriverData)
 * tenha o campo tipoVeiculo preservado.
 * 
 * @param driverData - O objeto de motorista a ser processado
 * @returns O objeto com o campo tipoVeiculo preservado
 */
export function preservarTipoVeiculo<T extends Record<string, any>>(driverData: T): T {
  // Se o motorista n√£o tem tipoVeiculo definido, garantir que seja undefined e n√£o null
  if (!driverData) {
    return driverData;
  }
  
  // Se tipoVeiculo n√£o existir no objeto, adiciona como undefined
  if (!('tipoVeiculo' in driverData)) {
    console.log('üöó preservarTipoVeiculo: Adicionando campo tipoVeiculo como undefined');
    return {
      ...driverData,
      tipoVeiculo: undefined
    };
  }
  
  // Se tipoVeiculo existir, garantir que seja string ou undefined, nunca null
  const tipoVeiculo = driverData.tipoVeiculo === null ? undefined : driverData.tipoVeiculo;
  
  console.log(`üöó preservarTipoVeiculo: Preservando tipo de ve√≠culo: "${tipoVeiculo || 'n√£o definido'}"`);
  
  return {
    ...driverData,
    tipoVeiculo
  };
}

/**
 * Fun√ß√£o para obter as classes CSS para exibi√ß√£o do tipo de ve√≠culo
 * de forma consistente em toda a aplica√ß√£o.
 * 
 * @param tipoVeiculo - O tipo de ve√≠culo
 * @returns String com classes CSS para o elemento
 */
export function getTipoVeiculoClasses(tipoVeiculo: string | undefined | null): string {
  return tipoVeiculo 
    ? 'text-blue-600 bg-blue-50' 
    : 'text-gray-600 bg-gray-50';
}
